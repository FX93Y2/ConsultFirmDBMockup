import snowflake.connector
from snowflake.connector.errors import ProgrammingError
from dotenv import load_dotenv
import os

load_dotenv()

SNOWFLAKE_ACCOUNT = os.getenv('SNOWFLAKE_ACCOUNT')
SNOWFLAKE_USER = os.getenv('SNOWFLAKE_USER')
SNOWFLAKE_PASSWORD = os.getenv('SNOWFLAKE_PASSWORD')

# SQL commands to set up the database with staging table names
SQL_COMMANDS = """
-- Create the database
CREATE DATABASE IF NOT EXISTS consulting_firm_db;

-- Use the new database
USE DATABASE consulting_firm_db;

-- Create a schema
CREATE SCHEMA IF NOT EXISTS public;

-- Use the schema
USE SCHEMA public;

-- Create Title table
CREATE TABLE IF NOT EXISTS STG_TITLE (
    TITLEID INTEGER PRIMARY KEY,
    TITLE STRING
);

-- Create BusinessUnit table
CREATE TABLE IF NOT EXISTS STG_BUSINESS_UNIT (
    BUSINESSUNITID INTEGER PRIMARY KEY,
    BUSINESSUNITNAME STRING
);

-- Create Consultant table
CREATE TABLE IF NOT EXISTS STG_CONSULTANT (
    CONSULTANTID STRING PRIMARY KEY,
    BUSINESSUNITID INTEGER,
    FIRSTNAME STRING,
    LASTNAME STRING,
    EMAIL STRING,
    CONTACT STRING,
    HIREYEAR INTEGER,
    FOREIGN KEY (BUSINESSUNITID) REFERENCES STG_BUSINESS_UNIT(BUSINESSUNITID)
);

-- Create ConsultantTitleHistory table
CREATE TABLE IF NOT EXISTS STG_CONSULTANT_TITLE_HISTORY (
    ID INTEGER PRIMARY KEY,
    CONSULTANTID STRING,
    TITLEID INTEGER,
    STARTDATE DATE,
    ENDDATE DATE,
    EVENTTYPE STRING,
    SALARY INTEGER,
    FOREIGN KEY (CONSULTANTID) REFERENCES STG_CONSULTANT(CONSULTANTID),
    FOREIGN KEY (TITLEID) REFERENCES STG_TITLE(TITLEID)
);

-- Create Payroll table
CREATE TABLE IF NOT EXISTS STG_PAYROLL (
    PAYROLLID INTEGER PRIMARY KEY,
    CONSULTANTID STRING,
    AMOUNT FLOAT,
    EFFECTIVEDATE DATE,
    FOREIGN KEY (CONSULTANTID) REFERENCES STG_CONSULTANT(CONSULTANTID)
);

-- Create Location table
CREATE TABLE IF NOT EXISTS STG_LOCATION (
    LOCATIONID INTEGER PRIMARY KEY,
    STATE STRING,
    CITY STRING
);

-- Create Client table
CREATE TABLE IF NOT EXISTS STG_CLIENT (
    CLIENTID INTEGER PRIMARY KEY,
    CLIENTNAME STRING,
    LOCATIONID INTEGER,
    PHONENUMBER STRING,
    EMAIL STRING,
    FOREIGN KEY (LOCATIONID) REFERENCES STG_LOCATION(LOCATIONID)
);

-- Create Project table
CREATE TABLE IF NOT EXISTS STG_PROJECT (
    PROJECTID INTEGER PRIMARY KEY,
    CLIENTID INTEGER,
    UNITID INTEGER,
    NAME STRING,
    TYPE STRING,
    STATUS STRING,
    PLANNEDSTARTDATE DATE,
    PLANNEDENDDATE DATE,
    ACTUALSTARTDATE DATE,
    ACTUALENDDATE DATE,
    PRICE FLOAT,
    ESTIMATEDBUDGET FLOAT,
    PLANNEDHOURS INTEGER,
    ACTUALHOURS FLOAT,
    PROGRESS INTEGER,
    CREATEDAT TIMESTAMP_NTZ,
    FOREIGN KEY (CLIENTID) REFERENCES STG_CLIENT(CLIENTID),
    FOREIGN KEY (UNITID) REFERENCES STG_BUSINESS_UNIT(BUSINESSUNITID)
);

-- Create ProjectTeam table
CREATE TABLE IF NOT EXISTS STG_PROJECT_TEAM (
    ID INTEGER PRIMARY KEY,
    PROJECTID INTEGER,
    CONSULTANTID STRING,
    ROLE STRING,
    STARTDATE DATE,
    ENDDATE DATE,
    FOREIGN KEY (PROJECTID) REFERENCES STG_PROJECT(PROJECTID),
    FOREIGN KEY (CONSULTANTID) REFERENCES STG_CONSULTANT(CONSULTANTID)
);

-- Create Deliverable table
CREATE TABLE IF NOT EXISTS STG_DELIVERABLE (
    DELIVERABLEID INTEGER PRIMARY KEY,
    PROJECTID INTEGER,
    NAME STRING,
    PLANNEDSTARTDATE DATE,
    ACTUALSTARTDATE DATE,
    STATUS STRING,
    PRICE FLOAT,
    DUEDATE DATE,
    SUBMISSIONDATE DATE,
    INVOICEDDATE DATE,
    PROGRESS INTEGER,
    PLANNEDHOURS FLOAT,
    ACTUALHOURS FLOAT,
    FOREIGN KEY (PROJECTID) REFERENCES STG_PROJECT(PROJECTID)
);

-- Create ProjectBillingRate table
CREATE TABLE IF NOT EXISTS STG_PROJECT_BILLING_RATE (
    BILLINGRATEID INTEGER PRIMARY KEY,
    PROJECTID INTEGER,
    TITLEID INTEGER,
    RATE FLOAT,
    FOREIGN KEY (PROJECTID) REFERENCES STG_PROJECT(PROJECTID),
    FOREIGN KEY (TITLEID) REFERENCES STG_TITLE(TITLEID)
);

-- Create ConsultantDeliverable table
CREATE TABLE IF NOT EXISTS STG_CONSULTANT_DELIVERABLE (
    ID INTEGER PRIMARY KEY,
    CONSULTANTID STRING,
    DELIVERABLEID INTEGER,
    DATE DATE,
    HOURS INTEGER,
    FOREIGN KEY (CONSULTANTID) REFERENCES STG_CONSULTANT(CONSULTANTID),
    FOREIGN KEY (DELIVERABLEID) REFERENCES STG_DELIVERABLE(DELIVERABLEID)
);

-- Create ProjectExpense table
CREATE TABLE IF NOT EXISTS STG_PROJECT_EXPENSE (
    PROJECTEXPENSEID INTEGER PRIMARY KEY,
    PROJECTID INTEGER,
    DELIVERABLEID INTEGER,
    DATE DATE,
    AMOUNT FLOAT,
    DESCRIPTION STRING,
    CATEGORY STRING,
    ISBILLABLE BOOLEAN,
    FOREIGN KEY (PROJECTID) REFERENCES STG_PROJECT(PROJECTID),
    FOREIGN KEY (DELIVERABLEID) REFERENCES STG_DELIVERABLE(DELIVERABLEID)
);
"""

def setup_snowflake_db():
    try:
        # Connect to Snowflake
        conn = snowflake.connector.connect(
            account=SNOWFLAKE_ACCOUNT,
            user=SNOWFLAKE_USER,
            password=SNOWFLAKE_PASSWORD
        )
        
        cursor = conn.cursor()
        
        # Execute SQL commands
        for command in SQL_COMMANDS.split(';'):
            if command.strip():
                cursor.execute(command)
        
        print("Database setup completed successfully.")
    
    except ProgrammingError as e:
        print(f"An error occurred: {e}")
    
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    setup_snowflake_db()
